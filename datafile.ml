open Batteries_uni
open Bigarray
open Unix

let rows = 1_000_000
let cols = 900

let mode = float32
let layout = fortran_layout

let scaling_dev = [49; 52; 28; 180; 46; 27; 203; 54; 29; 42; 21; 38; 76; 29; 43; 18; 32; 37; 15; 54; 57; 64; 149; 43; 26; 61; 20; 59; 85; 32; 64; 17; 26; 15; 105; 31; 40; 100; 31; 35; 24; 25; 41; 59; 71; 39; 28; 57; 37; 26; 336; 99; 34; 11; 66; 35; 25; 55; 125; 49; 148; 19; 53; 162; 29; 822; 38; 47; 46; 28; 47; 25; 15; 15; 25; 35; 34; 16; 25; 31; 32; 85; 78; 70; 18; 66; 168; 24; 18; 29; 48; 27; 29; 101; 35; 75; 77; 265; 12; 75; 66; 28; 234; 29; 55; 24; 41; 54; 30; 51; 45; 76; 211; 61; 52; 29; 14; 12; 419; 13; 98; 56; 45; 186; 43; 75; 35; 44; 43; 52; 36; 15; 17; 25; 36; 37; 19; 31; 33; 23; 138; 194; 34; 65; 18; 61; 595; 19; 76; 39; 32; 24; 18; 11; 34; 16; 37; 22; 140; 12; 16; 33; 59; 226; 15; 32; 18; 10; 20; 29; 186; 51; 53; 224; 18; 101; 10; 29; 17; 229; 30; 111; 149; 17; 45; 124; 19; 47; 35; 26; 406; 45; 77; 222; 36; 16; 24; 37; 23; 14; 51; 14; 52; 21; 44; 23; 39; 72; 65; 19; 13; 386; 10; 40; 30; 43; 40; 69; 46; 28; 21; 39; 65; 31; 76; 36; 26; 27; 35; 47; 66; 27; 19; 17; 58; 31; 14; 23; 20; 63; 19; 84; 59; 22; 21; 65; 37; 42; 56; 63; 42; 48; 24; 52; 183; 16; 40; 41; 48; 55; 26; 30; 54; 119; 11; 578; 48; 57; 42; 50; 62; 34; 52; 58; 45; 22; 55; 23; 55; 63; 18; 51; 40; 19; 20; 23; 77; 59; 118; 30; 20; 28; 36; 98; 14; 47; 15; 57; 43; 21; 169; 49; 13; 20; 20; 313; 56; 29; 52; 52; 17; 49; 57; 31; 18; 72; 19; 25; 54; 46; 38; 46; 66; 50; 32; 58; 174; 23; 37; 81; 76; 40; 74; 20; 21; 445; 246; 20; 39; 67; 14; 35; 35; 28; 48; 305; 57; 29; 17; 52; 12; 20; 22; 58; 23; 57; 34; 49; 25; 56; 18; 116; 20; 54; 83; 37; 20; 29; 31; 35; 42; 24; 21; 46; 63; 16; 31; 44; 37; 25; 197; 31; 44; 71; 162; 34; 16; 28; 56; 41; 13; 47; 156; 22; 40; 89; 44; 13; 17; 101; 15; 58; 51; 94; 57; 140; 71; 12; 32; 35; 35; 54; 25; 19; 190; 33; 33; 40; 37; 20; 133; 12; 43; 25; 38; 68; 21; 30; 42; 42; 88; 457; 38; 28; 20; 23; 44; 22; 42; 39; 15; 167; 61; 40; 24; 314; 73; 37; 36; 38; 35; 70; 35; 61; 213; 15; 28; 61; 32; 63; 29; 34; 25; 19; 36; 34; 325; 34; 86; 56; 44; 20; 15; 28; 58; 431; 45; 29; 19; 24; 199; 86; 69; 58; 58; 24; 146; 34; 45; 14; 14; 53; 91; 65; 39; 49; 39; 43; 30; 102; 52; 35; 50; 48; 32; 20; 50; 16; 36; 51; 278; 57; 29; 39; 27; 26; 28; 19; 30; 46; 29; 33; 24; 126; 34; 38; 27; 20; 53; 49; 41; 36; 25; 24; 76; 27; 68; 37; 63; 18; 42; 27; 78; 67; 32; 42; 13; 69; 22; 121; 41; 33; 27; 39; 22; 27; 146; 55; 18; 51; 51; 32; 138; 70; 39; 23; 26; 61; 23; 25; 52; 14; 18; 40; 81; 33; 34; 17; 25; 21; 14; 38; 60; 54; 39; 38;  9; 19; 24; 11; 49; 31; 23; 12; 46; 49; 38; 17; 32; 332; 39; 56; 44; 64; 32; 51; 21; 57; 50; 309; 23; 43; 116; 32; 32; 252; 121; 115; 15; 79; 44; 132; 40; 16; 29; 12; 26; 104; 13; 35; 54; 49; 60; 214; 29; 46; 36; 52; 23; 33; 15; 340; 231; 37; 22; 21; 47; 54; 32; 14; 49; 59; 43; 75; 22; 203; 71; 31; 195; 16; 730; 54; 32; 37; 22; 59; 45; 14; 21; 33; 11; 41; 40; 60; 37; 36; 58; 21; 27; 67; 12; 30; 32; 168; 266; 385; 22; 26; 25; 50; 22; 218; 18; 66; 18; 33; 87; 95; 25; 24; 22; 29; 88; 29; 55; 51; 59; 21; 14; 43; 40; 25; 66; 15; 57; 165; 20; 50; 38; 183; 43; 79; 33; 39; 50; 81; 27; 25; 53; 145; 19; 36; 27; 30; 16; 23; 226; 64; 18; 44; 16; 72; 20; 36; 27; 52; 70; 908; 31; 33; 14; 34; 29; 12; 201; 32; 207; 39; 33; 15; 50; 56; 59; 27; 12; 26; 25; 25; 20; 19; 47; 61; 34; 12; 15; 62; 55; 58; 379; 13; 15; 22; 20; 48; 75; 27; 25; 18; 32; 15; 131; 45; 68; 58; 59; 32; 63; 108; 18; 18; 12; 209; 11; 22; 20; 13; 21; 64; 123; 19; 47; 60; 40; 51; 58; 28; 26; 20; 11; 85; 36; 26; 45; 23; 279; 98; 16; 14; 79; 47; 43; 41; 36; 104; 16; 249; 36; 31; 40; 39; 33; 50; 40; 25; 228; 74; 39; 33;  7; 25; 24; 31; 45; 37; 22; 114; 68; 28; 18; 48; 82; 20; 457; 31; 68; 46; 59; 15; 39; 15; 19; 40; 56; 26; 56; 44; 20; 109; 18; 21; 178; 104; 17; 48; 22; 27; 36; 286; 35; 122; 34; 12; 43; 10; 21; 21; 15; 17; 26; 31] |> List.map float_of_int 

let scaling_test = [52; 95; 25; 205; 30; 41; 276; 59; 43; 96; 21; 44; 30; 52; 41; 19; 26; 44; 16; 48; 44; 37; 218; 36; 23; 71; 22; 60; 83; 37; 43; 16; 40; 12; 104; 32; 61; 105; 32; 26; 23; 40; 49; 108; 126; 42; 35; 40; 44; 28; 324; 144; 26; 18; 64; 36; 35; 42; 343; 61; 168; 23; 42; 246; 26; 815; 58; 64; 59; 48; 50; 50; 17; 20; 41; 47; 28; 21; 29; 50; 34; 69; 71; 88; 19; 115; 254; 29; 25; 32; 59; 41; 38; 75; 32; 48; 113; 235; 16; 85; 62; 27; 299; 34; 46; 33; 44; 86; 42; 51; 26; 102; 257; 72; 43; 35; 10; 14; 478; 12; 78; 71; 50; 206; 49; 83; 41; 76; 83; 45; 42; 11; 17; 27; 39; 46; 26; 33; 42; 21; 53; 217; 59; 65; 19; 51; 448; 19; 78; 47; 42; 26; 19; 13; 43; 17; 39; 18; 64; 21; 18; 33; 85; 210; 19; 37; 17; 18; 50; 28; 328; 35; 66; 271; 17; 121; 18; 41; 15; 253; 27; 95; 186; 37; 19; 177; 19; 49; 46; 30; 473; 39; 62; 204; 32; 20; 24; 35; 33; 16; 56; 13; 44; 32; 49; 50; 35; 32; 90; 26; 16; 487; 13; 28; 45; 52; 43; 54; 68; 34; 25; 58; 50; 26; 78; 31; 35; 31; 28; 47; 106; 27; 20; 14; 84; 27; 18; 25; 34; 55; 17; 77; 58; 27; 22; 68; 43; 53; 24; 62; 45; 58; 27; 42; 77; 20; 48; 40; 39; 45; 37; 35; 59; 325; 14; 615; 40; 91; 55; 42; 40; 30; 40; 80; 100; 21; 46; 17; 64; 71; 20; 42; 42; 21; 30; 17; 79; 61; 176; 37; 21; 41; 30; 195; 15; 53; 16; 46; 42; 22; 237; 102; 14; 21; 30; 378; 58; 29; 53; 29; 17; 33; 81; 89; 17; 47; 63; 24; 54; 41; 49; 35; 82; 67; 48; 60; 156; 25; 41; 106; 84; 46; 67; 44; 21; 745; 193; 29; 57; 126; 16; 29; 38; 36; 68; 409; 70; 48; 17; 45; 23; 18; 18; 63; 26; 82; 37; 47; 25; 61; 23; 51; 28; 82; 73; 44; 25; 36; 41; 43; 39; 38; 24; 52; 48; 22; 52; 46; 55; 40; 274; 27; 55; 81; 189; 35; 21; 17; 42; 66; 22; 74; 91; 21; 88; 80; 71; 13; 13; 96; 17; 86; 38; 57; 33; 144; 71; 22; 44; 33; 35; 77; 30; 19; 80; 55; 39; 38; 41; 22; 148; 16; 52; 49; 55; 73; 29; 27; 43; 49; 57; 913; 22; 38; 23; 27; 32; 41; 38; 155; 16; 69; 57; 45; 28; 331; 80; 60; 44; 45; 61; 183; 53; 61; 211; 33; 22; 62; 28; 85; 34; 46; 40; 19; 57; 54; 427; 52; 70; 37; 54; 64; 22; 42; 49; 183; 51; 27; 21; 24; 402; 62; 75; 52; 68; 22; 160; 50; 31; 12; 19; 88; 105; 48; 49; 54; 34; 58; 29; 104; 41; 39; 43; 53; 52; 23; 54; 17; 44; 62; 331; 57; 35; 34; 29; 25; 60; 27; 43; 87; 41; 45; 24; 147; 37; 37; 25; 20; 58; 41; 51; 36; 20; 34; 65; 36; 68; 95; 70; 25; 29; 32; 66; 78; 76; 64; 19; 74; 18; 167; 54; 31; 28; 34; 21; 33; 121; 34; 28; 38; 41; 36; 195; 68; 55; 28; 30; 111; 35; 32; 85; 23; 25; 38; 66; 38; 42; 23; 34; 20; 17; 40; 73; 40; 32; 43; 11; 16; 32; 13; 94; 30; 31; 15; 39; 52; 35; 23; 40; 330; 46; 71; 30; 65; 45; 82; 18; 52; 48; 339; 41; 38; 154; 28; 39; 360; 76; 103; 20; 84; 46; 74; 71; 15; 25; 20; 30; 33; 17; 31; 54; 76; 37; 215; 56; 45; 33; 31; 17; 21; 16; 480; 162; 32; 29; 88; 49; 69; 45; 13; 51; 68; 35; 57; 18; 277; 71; 38; 350; 23; 744; 59; 28; 71; 25; 46; 49; 14; 14; 25; 11; 34; 36; 49; 36; 18; 39; 24; 21; 69; 18; 38; 50; 167; 296; 541; 33; 38; 34; 44; 25; 210; 19; 64; 105; 34; 77; 99; 20; 29; 15; 30; 94; 31; 54; 65; 58; 21; 17; 76; 35; 42; 67; 18; 100; 209; 20; 59; 90; 283; 36; 62; 41; 69; 51; 40; 17; 28; 60; 144; 45; 28; 43; 25; 20; 27; 141; 75; 20; 59; 30; 60; 25; 54; 33; 41; 73; 832; 58; 44; 19; 28; 54; 14; 317; 31; 63; 124; 37; 19; 74; 48; 61; 26; 17; 32; 32; 24; 24; 49; 55; 147; 40; 16; 20; 73; 109; 80; 323; 16; 16; 38; 23; 60; 83; 31; 28; 19; 45; 22; 138; 53; 65; 58; 26; 32; 68; 145; 13; 25; 13; 197; 24; 25; 20; 14; 26; 61; 153; 19; 58; 45; 36; 85; 127; 38; 31; 42; 14; 123; 42; 44; 76; 24; 327; 60; 19; 19; 87; 51; 27; 41; 52; 90; 15; 306; 36; 37; 25; 56; 25; 48; 38; 24; 265; 83; 42; 39;  7; 23; 36; 45; 42; 45; 27; 126; 87; 35; 33; 46; 86; 25; 331; 39; 34; 107; 75; 15; 39; 22; 21; 58; 61; 41; 36; 45; 25; 65; 27; 23; 302; 81; 19; 113; 25; 40; 40; 296; 51; 111; 37; 31; 35; 13; 21; 18; 14; 15; 42; 47] |> List.map float_of_int 


let scaling = [54; 75; 28; 386; 52; 43; 289; 113; 44; 74; 22; 45; 76; 37; 47; 21; 37; 79; 15; 87; 57; 64; 275; 46; 40; 77; 24; 76; 85; 59; 72; 18; 42; 19; 201; 66; 71; 100; 36; 44; 31; 27; 49; 87; 119; 39; 40; 80; 52; 38; 399; 115; 52; 19; 75; 38; 42; 72; 404; 96; 163; 20; 65; 230; 43; 822; 38; 85; 60; 50; 83; 41; 26; 17; 30; 66; 34; 17; 57; 49; 40; 88; 83; 138; 48; 128; 398; 33; 38; 87; 118; 40; 41; 101; 39; 75; 101; 265; 17; 89; 96; 48; 334; 31; 77; 43; 61; 132; 30; 55; 45; 115; 241; 81; 52; 29; 16; 15; 419; 24; 108; 87; 45; 213; 72; 143; 80; 87; 87; 52; 71; 17; 29; 37; 43; 64; 27; 48; 100; 39; 138; 234; 49; 94; 21; 70; 595; 20; 97; 56; 45; 33; 22; 17; 79; 16; 54; 27; 140; 31; 19; 33; 99; 476; 22; 58; 34; 13; 47; 31; 404; 52; 67; 292; 21; 101; 16; 53; 24; 313; 35; 118; 157; 34; 45; 218; 27; 63; 57; 26; 429; 52; 77; 268; 54; 35; 24; 41; 40; 22; 81; 16; 52; 29; 73; 43; 40; 72; 79; 22; 19; 495; 27; 40; 75; 56; 49; 69; 66; 59; 27; 62; 87; 35; 107; 36; 65; 33; 37; 63; 96; 27; 26; 17; 95; 37; 19; 24; 52; 63; 24; 88; 63; 33; 29; 95; 52; 60; 56; 112; 60; 78; 24; 63; 202; 21; 46; 58; 48; 78; 39; 48; 74; 142; 21; 578; 48; 95; 74; 70; 77; 54; 55; 77; 114; 28; 111; 23; 64; 71; 23; 61; 52; 26; 21; 26; 98; 59; 274; 38; 28; 37; 40; 152; 22; 51; 24; 58; 53; 32; 274; 130; 31; 34; 24; 318; 71; 31; 69; 56; 42; 49; 135; 65; 22; 73; 31; 30; 62; 55; 70; 59; 98; 79; 39; 62; 217; 23; 40; 112; 77; 45; 77; 28; 23; 549; 265; 29; 56; 106; 28; 46; 48; 45; 51; 510; 71; 83; 21; 52; 36; 26; 26; 104; 27; 57; 51; 56; 25; 77; 32; 116; 45; 166; 84; 48; 32; 48; 56; 52; 46; 42; 24; 48; 64; 21; 88; 55; 43; 54; 342; 44; 51; 147; 177; 52; 21; 31; 56; 70; 26; 144; 156; 23; 67; 108; 60; 28; 20; 101; 22; 89; 51; 106; 74; 310; 72; 19; 56; 50; 61; 66; 47; 23; 190; 36; 38; 43; 66; 27; 210; 18; 59; 32; 73; 87; 34; 31; 45; 65; 102; 661; 38; 47; 20; 27; 44; 36; 60; 90; 24; 167; 99; 46; 38; 314; 130; 55; 38; 49; 106; 114; 57; 94; 213; 120; 28; 84; 39; 77; 65; 55; 32; 39; 53; 45; 468; 43; 94; 87; 59; 31; 27; 76; 58; 460; 46; 39; 19; 28; 398; 87; 70; 95; 94; 36; 441; 63; 45; 18; 23; 95; 110; 100; 48; 62; 45; 84; 56; 126; 68; 49; 75; 78; 60; 25; 90; 21; 59; 110; 444; 75; 33; 39; 41; 40; 43; 50; 52; 105; 42; 43; 24; 204; 46; 38; 31; 28; 74; 49; 52; 36; 32; 49; 85; 34; 82; 71; 71; 24; 54; 47; 138; 89; 45; 53; 28; 115; 61; 199; 70; 40; 72; 52; 26; 46; 177; 55; 28; 56; 53; 43; 161; 81; 58; 59; 40; 128; 72; 31; 75; 19; 22; 50; 81; 38; 53; 26; 34; 24; 25; 88; 148; 74; 44; 44; 15; 20; 53; 22; 80; 33; 51; 16; 65; 70; 61; 21; 32; 344; 54; 173; 44; 64; 45; 102; 21; 59; 53; 492; 42; 47; 116; 32; 45; 302; 121; 129; 63; 190; 55; 132; 72; 27; 29; 16; 40; 104; 15; 51; 73; 84; 71; 395; 33; 49; 60; 52; 29; 33; 31; 426; 307; 45; 33; 44; 66; 76; 65; 21; 88; 69; 43; 75; 24; 338; 121; 38; 386; 88; 751; 58; 62; 66; 23; 73; 93; 76; 21; 33; 14; 43; 73; 93; 55; 36; 84; 22; 27; 93; 21; 48; 56; 775; 563; 726; 58; 27; 36; 50; 57; 227; 33; 93; 39; 33; 87; 150; 40; 46; 22; 36; 139; 35; 55; 55; 84; 31; 24; 82; 53; 56; 107; 26; 115; 412; 29; 100; 53; 335; 54; 118; 49; 125; 63; 88; 52; 37; 111; 174; 29; 45; 90; 46; 32; 35; 226; 82; 21; 93; 21; 72; 20; 50; 48; 52; 100; 908; 56; 62; 23; 46; 35; 15; 371; 73; 207; 54; 83; 25; 57; 73; 91; 62; 21; 43; 35; 25; 27; 48; 60; 127; 52; 16; 27; 62; 106; 91; 539; 16; 16; 52; 35; 61; 83; 35; 30; 25; 53; 33; 174; 92; 68; 62; 59; 32; 66; 108; 18; 36; 15; 209; 17; 22; 21; 14; 41; 78; 279; 29; 104; 60; 56; 70; 81; 54; 36; 57; 16; 176; 61; 36; 109; 29; 383; 98; 24; 31; 131; 47; 52; 47; 50; 122; 19; 730; 48; 40; 40; 45; 44; 67; 62; 37; 482; 78; 44; 35; 10; 36; 48; 49; 47; 44; 33; 123; 91; 46; 63; 48; 82; 33; 478; 60; 80; 53; 118; 27; 71; 21; 29; 63; 89; 35; 66; 54; 23; 109; 32; 32; 325; 124; 23; 77; 26; 38; 40; 382; 63; 151; 60; 20; 60; 17; 27; 27; 15; 22; 41; 44] |> List.map float




let read fn = 
  let fh = openfile fn [O_RDONLY] 0o755 in
  let mmap = Array2.map_file fh mode layout false cols rows in
  let get_row i = Array2.slice_right mmap i in
  (1--rows) |> Enum.map get_row
    
let get_matrix fn =
  let fh = openfile fn [O_RDONLY] 0o755 in
  Array2.map_file fh mode layout false cols rows

let write output_file =
  let fh = openfile output_file [O_RDWR;O_CREAT] 0o755 in
  Array2.map_file fh mode layout true cols rows
  

let read_text fn =
  File.lines_of fn |> Enum.map (fun line -> String.nsplit line " " |> List.map float_of_string)

  
open Lacaml.Impl.S (* Single-precision reals *)
let print_float oc x = Printf.fprintf oc "%.3f" x


(* Check data *)
let check_data train_file = 
  let d0 = read_text "/home/thelema/development.txt" in
  let d1 = read train_file |> Enum.map Vec.to_list in
  let epsilon = 0.0001 in let float_eq a b = abs_float (a -. b) < epsilon in
  let eq row l1 l2 = 
    if List.map2 ( *. ) l2 scaling |> List.for_all2 float_eq l1 then () else (
      Printf.printf "Verification failed on row %d:\ntext:%a\npack:%a\n" row
	(List.print print_float) l1 (List.print print_float) l2
    )
  in
  Enum.iter2i eq d0 d1;
  Printf.printf "Data verified\n"
